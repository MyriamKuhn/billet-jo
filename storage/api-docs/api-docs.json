{
    "openapi": "3.0.0",
    "info": {
        "title": "Paris 2024 Olympic Games Ticketing API",
        "description": "\nThis API manages the entire ticket lifecycle for the Paris 2024 Olympic Games, covering:\n\n- User registration and profile management\n\n- Shopping cart and payment processing\n\n- Ticket generation and entry validation\n\n\nDeveloped as part of a Bachelor's in Digital Solutions Development, it follows a modular Laravel monolith architecture,\norganized into internal packages (users, tickets, cart, payment, etc.) for maintainability and scalability.\n\nNotifications (emails and system messages) are handled internally via a dedicated Laravel service and are not exposed publicly.\n\nAccess is secured by a restrictive CORS policy and token-based authentication (Laravel Sanctum).\n\nThe API supports multiple languages (English, French, German) injected in the header and is designed to be user-friendly and developer-friendly.",
        "contact": {
            "name": "Myriam Kühn",
            "url": "https://myriamkuhn.com/",
            "email": "myriam.kuehn@free.fr"
        },
        "license": {
            "name": "MIT Licence",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://localhost:8000",
            "description": "Local dev"
        },
        {
            "url": "https://api-jo2024.mkcodecreations.dev",
            "description": "Prod"
        }
    ],
    "paths": {
        "/api/cart": {
            "get": {
                "tags": [
                    "Carts"
                ],
                "summary": "Retrieve current shopping cart",
                "description": "\nReturns the current cart contents:\n\n- **Authenticated users**: full cart model (cart ID, user ID, items with product details)\n- **Guests**: a simple map of product IDs to quantities\n\nProvide a Bearer token to operate on the user’s cart; omit it to operate on the guest cart.\n",
                "operationId": "getCurrentCart",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AcceptLanguageHeader"
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token for authenticated users (optional)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Guest-Cart-Id",
                        "in": "header",
                        "description": "Guest cart ID (UUID) for guest users (optional)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cart retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "required": [
                                        "data"
                                    ],
                                    "properties": {
                                        "data": {
                                            "oneOf": [
                                                {
                                                    "$ref": "#/components/schemas/CartMinimal"
                                                },
                                                {
                                                    "required": [
                                                        "meta",
                                                        "data"
                                                    ],
                                                    "properties": {
                                                        "meta": {
                                                            "required": [
                                                                "guest_cart_id"
                                                            ],
                                                            "properties": {
                                                                "guest_cart_id": {
                                                                    "description": "UUID unique du panier visiteur",
                                                                    "type": "string",
                                                                    "format": "uuid"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "data": {
                                                            "required": [
                                                                "cart_items"
                                                            ],
                                                            "properties": {
                                                                "cart_items": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "$ref": "#/components/schemas/CartItemMinimal"
                                                                    }
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                }
            }
        },
        "/api/cart/items/{product}": {
            "patch": {
                "tags": [
                    "Carts"
                ],
                "summary": "Set cart item quantity or remove item",
                "description": "\nUpdates the quantity for a given product in the current cart:\n\n- **quantity > 0**: set the new quantity\n- **quantity = 0**: remove the item from the cart\n\nAccessible by guests and authenticated users. Provide a Bearer token to update the user’s cart; omit it to update the guest cart.\n",
                "operationId": "updateCartItem",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token for authenticated users (optional)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Guest-Cart-Id",
                        "in": "header",
                        "description": "Guest cart ID (UUID) for guest users (optional)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "product",
                        "in": "path",
                        "description": "ID of the product to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 5
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "quantity"
                                ],
                                "properties": {
                                    "quantity": {
                                        "description": "New quantity (0 to remove item)",
                                        "type": "integer",
                                        "example": 3
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/NoContent"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/StockUnavailable"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                }
            }
        },
        "/api/cart/items": {
            "delete": {
                "tags": [
                    "Carts"
                ],
                "summary": "Clear authenticated user's cart",
                "description": "Deletes every item from the current authenticated user’s shopping cart. Requires a valid Bearer token.",
                "operationId": "823e170674e885d4d258f01dffa19120",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Bearer token for authenticated users (optional)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/NoContent"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthenticated"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/invoices": {
            "get": {
                "tags": [
                    "Invoices"
                ],
                "summary": "List user invoices",
                "description": "Returns a paginated list of the authenticated user’s invoices, with optional filters (status, date range), sorting and pagination.",
                "operationId": "listInvoices",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by invoice status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "pending",
                                "paid",
                                "failed",
                                "refunded"
                            ]
                        }
                    },
                    {
                        "name": "date_from",
                        "in": "query",
                        "description": "Filter invoices created on or after this date (YYYY-MM-DD)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "date_to",
                        "in": "query",
                        "description": "Filter invoices created on or before this date (YYYY-MM-DD)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "sort_by",
                        "in": "query",
                        "description": "Field to sort by",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "created_at",
                            "enum": [
                                "uuid",
                                "amount",
                                "created_at"
                            ]
                        }
                    },
                    {
                        "name": "sort_order",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "desc",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number to retrieve",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Paginated list of invoices",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "uuid": {
                                                        "type": "string",
                                                        "format": "uuid",
                                                        "example": "550e8400-e29b-41d4-a716-446655440000"
                                                    },
                                                    "amount": {
                                                        "type": "number",
                                                        "format": "float",
                                                        "example": 100
                                                    },
                                                    "status": {
                                                        "type": "string",
                                                        "example": "paid"
                                                    },
                                                    "created_at": {
                                                        "type": "string",
                                                        "format": "date-time",
                                                        "example": "2025-05-10T14:30:00+02:00"
                                                    },
                                                    "invoice_link": {
                                                        "type": "string",
                                                        "example": "invoice_5566.pdf"
                                                    },
                                                    "download_url": {
                                                        "type": "string",
                                                        "example": "https://api.example.com/api/invoices/invoice_5566.pdf"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "links": {
                                            "type": "object"
                                        },
                                        "meta": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthenticated"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/invoices/{filename}": {
            "get": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Download user invoice",
                "description": "Streams the invoice PDF for the logged-in user.",
                "operationId": "downloadInvoice",
                "parameters": [
                    {
                        "name": "filename",
                        "in": "path",
                        "description": "Filename of the invoice PDF",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "invoice_5566.pdf"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PDF file download",
                        "content": {
                            "application/pdf": {}
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthenticated"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/invoices/admin/{filename}": {
            "get": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Download invoice (admin)",
                "description": "Allows an administrator to download any invoice PDF by filename.",
                "operationId": "adminDownloadInvoice",
                "parameters": [
                    {
                        "name": "filename",
                        "in": "path",
                        "description": "Filename of the invoice PDF",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "invoice_5566.pdf"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PDF file download",
                        "content": {
                            "application/pdf": {}
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthenticated"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/payments": {
            "get": {
                "tags": [
                    "Payments"
                ],
                "summary": "List payments (only for admins)",
                "description": "Returns a paginated list of payments for administrators.",
                "operationId": "getPayments",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AcceptLanguageHeader"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Global search on uuid, invoice_link, transaction_id, user email or user ID",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by payment status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "pending",
                                "paid",
                                "failed",
                                "refunded"
                            ]
                        }
                    },
                    {
                        "name": "payment_method",
                        "in": "query",
                        "description": "Filter by payment method",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "paypal",
                                "stripe",
                                "free"
                            ]
                        }
                    },
                    {
                        "name": "user_id",
                        "in": "query",
                        "description": "Filter by user ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "date_from",
                        "in": "query",
                        "description": "Filter payments created on or after this date (YYYY-MM-DD)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "date_to",
                        "in": "query",
                        "description": "Filter payments created on or before this date (YYYY-MM-DD)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "amount_min",
                        "in": "query",
                        "description": "Filter by minimum payment amount",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "float"
                        }
                    },
                    {
                        "name": "amount_max",
                        "in": "query",
                        "description": "Filter by maximum payment amount",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "float"
                        }
                    },
                    {
                        "name": "sort_by",
                        "in": "query",
                        "description": "Sort by column (uuid, amount, paid_at, refunded_at, created_at)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "created_at",
                            "enum": [
                                "uuid",
                                "amount",
                                "paid_at",
                                "refunded_at",
                                "created_at"
                            ]
                        }
                    },
                    {
                        "name": "sort_order",
                        "in": "query",
                        "description": "Sort direction (asc, desc)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "desc",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Paginated list of payments",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/PaymentResource"
                                            }
                                        },
                                        "links": {
                                            "type": "object"
                                        },
                                        "meta": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthenticated"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Payments"
                ],
                "summary": "Initiate payment",
                "description": "Creates a new pending payment and returns a Stripe client secret for checkout.",
                "operationId": "storePayment",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AcceptLanguageHeader"
                    }
                ],
                "requestBody": {
                    "description": "Cart identifier and desired payment method",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "cart_id",
                                    "payment_method"
                                ],
                                "properties": {
                                    "cart_id": {
                                        "description": "ID of the cart to pay",
                                        "type": "integer",
                                        "example": 42
                                    },
                                    "payment_method": {
                                        "description": "Payment provider to use",
                                        "type": "string",
                                        "enum": [
                                            "stripe",
                                            "paypal",
                                            "free"
                                        ],
                                        "example": "stripe"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Payment initiated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "properties": {
                                                "uuid": {
                                                    "description": "Unique payment identifier",
                                                    "type": "string",
                                                    "format": "uuid",
                                                    "example": "550e8400-e29b-41d4-a716-446655440000"
                                                },
                                                "status": {
                                                    "description": "Initial payment status",
                                                    "type": "string",
                                                    "example": "pending"
                                                },
                                                "transaction_id": {
                                                    "description": "Stripe transaction ID (if available)",
                                                    "type": "string",
                                                    "example": null,
                                                    "nullable": true
                                                },
                                                "client_secret": {
                                                    "description": "Stripe client secret for frontend checkout",
                                                    "type": "string",
                                                    "example": "pi_1F8Zk2LZ..."
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthenticated"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "409": {
                        "$ref": "#/components/responses/StockUnavailable"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "502": {
                        "description": "Payment gateway error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Payment gateway error, please try again later."
                                        },
                                        "code": {
                                            "type": "string",
                                            "example": "payment_gateway_error"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/payments/webhook": {
            "post": {
                "tags": [
                    "Payments"
                ],
                "summary": "Stripe webhook endpoint",
                "description": "Receives and verifies Stripe webhook events, updates payment status, and dispatches downstream events.",
                "operationId": "handleStripeWebhook",
                "parameters": [
                    {
                        "name": "Stripe-Signature",
                        "in": "header",
                        "description": "Stripe signature header for verifying payload authenticity",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Raw JSON payload sent by Stripe",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Webhook processed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid signature or payload",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Invalid signature"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    }
                }
            }
        },
        "/api/payments/{uuid}": {
            "get": {
                "tags": [
                    "Payments"
                ],
                "summary": "Get payment status",
                "description": "Returns the current status and paid timestamp of a payment for the authenticated user.",
                "operationId": "showPaymentStatus",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "Unique identifier of the payment",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "550e8400-e29b-41d4-a716-446655440000"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment status retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "description": "Current payment status",
                                            "type": "string",
                                            "example": "paid"
                                        },
                                        "paid_at": {
                                            "description": "Timestamp when payment was marked as paid",
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2025-05-10T14:30:00+02:00",
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthenticated"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/payments/{uuid}/refund": {
            "post": {
                "tags": [
                    "Payments"
                ],
                "summary": "Refund a payment",
                "description": "Allows an administrator to refund a specified amount and regenerates the invoice PDF under the same filename.",
                "operationId": "refundPayment",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "UUID of the payment to refund",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "550e8400-e29b-41d4-a716-446655440000"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Amount to refund (must be ≤ original payment amount)",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "amount"
                                ],
                                "properties": {
                                    "amount": {
                                        "description": "Amount to refund in the payment’s currency",
                                        "type": "number",
                                        "format": "float",
                                        "example": 25
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Payment refunded successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "uuid": {
                                            "type": "string",
                                            "format": "uuid",
                                            "example": "550e8400-e29b-41d4-a716-446655440000"
                                        },
                                        "refunded_amount": {
                                            "description": "Total amount refunded so far",
                                            "type": "number",
                                            "format": "float",
                                            "example": 25
                                        },
                                        "status": {
                                            "type": "string",
                                            "enum": [
                                                "pending",
                                                "paid",
                                                "failed",
                                                "refunded"
                                            ],
                                            "example": "refunded"
                                        },
                                        "refunded_at": {
                                            "description": "Timestamp when refund was processed",
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2025-05-10T15:45:00+02:00"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthenticated"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "502": {
                        "description": "Payment gateway error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Payment gateway error, please try again later."
                                        },
                                        "code": {
                                            "type": "string",
                                            "example": "payment_gateway_error"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/products": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Retrieve a paginated list of in-stock products",
                "description": "\nReturns a paginated list of products that are currently in stock.\n\n**Optional query parameters**:\n- `name`       — filter by product name\n- `category`   — filter by category\n- `location`   — filter by location\n- `date`       — filter by date (YYYY-MM-DD)\n- `places`     — filter by minimum number of places\n- `sort_by`    — sort field (`name`, `price`, `product_details->date`)\n- `order`      — sort direction (`asc`, `desc`)\n- `per_page`   — items per page (default: 15)\n- `page`       — page number (default: 1)\n",
                "operationId": "getProductsList",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AcceptLanguageHeader"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Filter by product name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "category",
                        "in": "query",
                        "description": "Filter by category",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "location",
                        "in": "query",
                        "description": "Filter by location",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "date",
                        "in": "query",
                        "description": "Filter by date (YYYY-MM-DD)",
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "places",
                        "in": "query",
                        "description": "Filter by minimum places",
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "sort_by",
                        "in": "query",
                        "description": "Sort field",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "name",
                                "price",
                                "product_details->date"
                            ]
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Sort direction",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page",
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Products retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/MinimalProduct"
                                            }
                                        },
                                        "pagination": {
                                            "properties": {
                                                "total": {
                                                    "type": "integer"
                                                },
                                                "per_page": {
                                                    "type": "integer"
                                                },
                                                "current_page": {
                                                    "type": "integer"
                                                },
                                                "last_page": {
                                                    "type": "integer"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    }
                }
            },
            "post": {
                "tags": [
                    "Products"
                ],
                "summary": "Create a new product with translations and images",
                "description": "Creates a new product record in **3** languages (en, fr, de) with images upload for each languages.",
                "operationId": "createProduct",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AcceptLanguageHeader"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "price",
                                    "stock_quantity",
                                    "translations[en][name]",
                                    "translations[fr][name]",
                                    "translations[de][name]",
                                    "translations[en][product_details][places]",
                                    "translations[fr][product_details][places]",
                                    "translations[de][product_details][places]",
                                    "translations[en][product_details][description]",
                                    "translations[fr][product_details][description]",
                                    "translations[de][product_details][description]",
                                    "translations[en][product_details][date]",
                                    "translations[fr][product_details][date]",
                                    "translations[de][product_details][date]",
                                    "translations[en][product_details][time]",
                                    "translations[fr][product_details][time]",
                                    "translations[de][product_details][time]",
                                    "translations[en][product_details][location]",
                                    "translations[fr][product_details][location]",
                                    "translations[de][product_details][location]",
                                    "translations[en][product_details][category]",
                                    "translations[fr][product_details][category]",
                                    "translations[de][product_details][category]",
                                    "translations[en][product_details][image]",
                                    "translations[fr][product_details][image]",
                                    "translations[de][product_details][image]"
                                ],
                                "properties": {
                                    "price": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 100
                                    },
                                    "sale": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 0.1
                                    },
                                    "stock_quantity": {
                                        "type": "integer",
                                        "example": 50
                                    },
                                    "translations[en][name]": {
                                        "type": "string",
                                        "example": "Opening Ceremony"
                                    },
                                    "translations[en][product_details][places]": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "translations[en][product_details][description]": {
                                        "type": "string",
                                        "example": "Experience the opening…"
                                    },
                                    "translations[en][product_details][date]": {
                                        "type": "string",
                                        "format": "date",
                                        "example": "2024-07-26"
                                    },
                                    "translations[en][product_details][time]": {
                                        "type": "string",
                                        "example": "19:30"
                                    },
                                    "translations[en][product_details][location]": {
                                        "type": "string",
                                        "example": "Stade de France"
                                    },
                                    "translations[en][product_details][category]": {
                                        "type": "string",
                                        "example": "Ceremonies"
                                    },
                                    "translations[en][product_details][image]": {
                                        "type": "file",
                                        "format": "binary"
                                    },
                                    "translations[fr][name]": {
                                        "type": "string",
                                        "example": "Cérémonie d’ouverture"
                                    },
                                    "translations[fr][product_details][places]": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "translations[fr][product_details][description]": {
                                        "type": "string",
                                        "example": "Assistez à la cérémonie…"
                                    },
                                    "translations[fr][product_details][date]": {
                                        "type": "string",
                                        "format": "date",
                                        "example": "2024-07-26"
                                    },
                                    "translations[fr][product_details][time]": {
                                        "type": "string",
                                        "example": "19:30"
                                    },
                                    "translations[fr][product_details][location]": {
                                        "type": "string",
                                        "example": "Stade de France"
                                    },
                                    "translations[fr][product_details][category]": {
                                        "type": "string",
                                        "example": "Cérémonies"
                                    },
                                    "translations[fr][product_details][image]": {
                                        "type": "file",
                                        "format": "binary"
                                    },
                                    "translations[de][name]": {
                                        "type": "string",
                                        "example": "Eröffnungszeremonie"
                                    },
                                    "translations[de][product_details][places]": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "translations[de][product_details][description]": {
                                        "type": "string",
                                        "example": "Erleben Sie die Eröffnung…"
                                    },
                                    "translations[de][product_details][date]": {
                                        "type": "string",
                                        "format": "date",
                                        "example": "2024-07-26"
                                    },
                                    "translations[de][product_details][time]": {
                                        "type": "string",
                                        "example": "19:30"
                                    },
                                    "translations[de][product_details][location]": {
                                        "type": "string",
                                        "example": "Stade de France"
                                    },
                                    "translations[de][product_details][category]": {
                                        "type": "string",
                                        "example": "Zeremonien"
                                    },
                                    "translations[de][product_details][image]": {
                                        "type": "file",
                                        "format": "binary"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Product created successfully, no content"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthenticated"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/products/all": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Retrieve all products (admin only)",
                "description": "\nReturns a paginated list of all products (including out-of-stock), with optional filtering and sorting.\n\n- **Caching enabled** for better performance\n- **Authentication**: Bearer token (admin only)\n- **Same query parameters** as `/api/products`\n",
                "operationId": "getProducts",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AcceptLanguageHeader"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Filter by product name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "category",
                        "in": "query",
                        "description": "Filter by category",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "location",
                        "in": "query",
                        "description": "Filter by location",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "date",
                        "in": "query",
                        "description": "Filter by date (YYYY-MM-DD)",
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "places",
                        "in": "query",
                        "description": "Filter by minimum places",
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "sort_by",
                        "in": "query",
                        "description": "Sort field",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "name",
                                "price",
                                "product_details->date"
                            ]
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Sort direction",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page",
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Products retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/MinimalProduct"
                                            }
                                        },
                                        "pagination": {
                                            "properties": {
                                                "total": {
                                                    "type": "integer"
                                                },
                                                "per_page": {
                                                    "type": "integer"
                                                },
                                                "current_page": {
                                                    "type": "integer"
                                                },
                                                "last_page": {
                                                    "type": "integer"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthenticated"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/products/{product}": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Get product details",
                "description": "Returns the full details of a single product identified by its ID.",
                "operationId": "getProductById",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AcceptLanguageHeader"
                    },
                    {
                        "name": "product",
                        "in": "path",
                        "description": "ID of product to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/MinimalProduct"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    }
                }
            },
            "put": {
                "tags": [
                    "Products"
                ],
                "summary": "Update product details",
                "description": "\nUpdates the details of an existing product for all 3 languages.\n\n**Requirements**:\n- Bearer authentication (admin only)\n- **multipart/form-data** content type\n- The image file is optional\n- The old image will be deleted if a new one is provided.\n- The product ID must exist in the database.\n",
                "operationId": "updateProduct",
                "parameters": [
                    {
                        "name": "product",
                        "in": "path",
                        "description": "ID of the product to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "price",
                                    "stock_quantity",
                                    "translations[en][name]",
                                    "translations[fr][name]",
                                    "translations[de][name]",
                                    "translations[en][product_details][places]",
                                    "translations[fr][product_details][places]",
                                    "translations[de][product_details][places]",
                                    "translations[en][product_details][description]",
                                    "translations[fr][product_details][description]",
                                    "translations[de][product_details][description]",
                                    "translations[en][product_details][date]",
                                    "translations[fr][product_details][date]",
                                    "translations[de][product_details][date]",
                                    "translations[en][product_details][time]",
                                    "translations[fr][product_details][time]",
                                    "translations[de][product_details][time]",
                                    "translations[en][product_details][location]",
                                    "translations[fr][product_details][location]",
                                    "translations[de][product_details][location]",
                                    "translations[en][product_details][category]",
                                    "translations[fr][product_details][category]",
                                    "translations[de][product_details][category]",
                                    "translations[en][product_details][image]",
                                    "translations[fr][product_details][image]",
                                    "translations[de][product_details][image]"
                                ],
                                "properties": {
                                    "price": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 100
                                    },
                                    "sale": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 0.1
                                    },
                                    "stock_quantity": {
                                        "type": "integer",
                                        "example": 50
                                    },
                                    "translations[en][name]": {
                                        "type": "string",
                                        "example": "Opening Ceremony"
                                    },
                                    "translations[en][product_details][places]": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "translations[en][product_details][description]": {
                                        "type": "string",
                                        "example": "Experience the opening…"
                                    },
                                    "translations[en][product_details][date]": {
                                        "type": "string",
                                        "format": "date",
                                        "example": "2024-07-26"
                                    },
                                    "translations[en][product_details][time]": {
                                        "type": "string",
                                        "example": "19:30"
                                    },
                                    "translations[en][product_details][location]": {
                                        "type": "string",
                                        "example": "Stade de France"
                                    },
                                    "translations[en][product_details][category]": {
                                        "type": "string",
                                        "example": "Ceremonies"
                                    },
                                    "translations[en][product_details][image]": {
                                        "type": "file",
                                        "format": "binary"
                                    },
                                    "translations[fr][name]": {
                                        "type": "string",
                                        "example": "Cérémonie d’ouverture"
                                    },
                                    "translations[fr][product_details][places]": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "translations[fr][product_details][description]": {
                                        "type": "string",
                                        "example": "Assistez à la cérémonie…"
                                    },
                                    "translations[fr][product_details][date]": {
                                        "type": "string",
                                        "format": "date",
                                        "example": "2024-07-26"
                                    },
                                    "translations[fr][product_details][time]": {
                                        "type": "string",
                                        "example": "19:30"
                                    },
                                    "translations[fr][product_details][location]": {
                                        "type": "string",
                                        "example": "Stade de France"
                                    },
                                    "translations[fr][product_details][category]": {
                                        "type": "string",
                                        "example": "Cérémonies"
                                    },
                                    "translations[fr][product_details][image]": {
                                        "type": "file",
                                        "format": "binary"
                                    },
                                    "translations[de][name]": {
                                        "type": "string",
                                        "example": "Eröffnungszeremonie"
                                    },
                                    "translations[de][product_details][places]": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "translations[de][product_details][description]": {
                                        "type": "string",
                                        "example": "Erleben Sie die Eröffnung…"
                                    },
                                    "translations[de][product_details][date]": {
                                        "type": "string",
                                        "format": "date",
                                        "example": "2024-07-26"
                                    },
                                    "translations[de][product_details][time]": {
                                        "type": "string",
                                        "example": "19:30"
                                    },
                                    "translations[de][product_details][location]": {
                                        "type": "string",
                                        "example": "Stade de France"
                                    },
                                    "translations[de][product_details][category]": {
                                        "type": "string",
                                        "example": "Zeremonien"
                                    },
                                    "translations[de][product_details][image]": {
                                        "type": "file",
                                        "format": "binary"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Product updated successfully, no content"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthenticated"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/products/{product}/pricing": {
            "patch": {
                "tags": [
                    "Products"
                ],
                "summary": "Update product pricing and stock (admin only)",
                "description": "Updates the pricing and stock quantity of a product only for an administrator.",
                "operationId": "updateProductPricing",
                "parameters": [
                    {
                        "name": "product",
                        "in": "path",
                        "description": "ID du produit à mettre à jour",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "example": 42
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "price": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 59.99
                                    },
                                    "sale": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 0.15
                                    },
                                    "stock_quantity": {
                                        "type": "integer",
                                        "example": 120
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Product pricing updated successfully, no content"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthenticated"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/tickets": {
            "get": {
                "tags": [
                    "Tickets"
                ],
                "summary": "Retrieve a filtered, paginated list of all tickets (admin only)",
                "description": "This endpoint retrieves a list of all tickets with optional filters, global search, and pagination. Admin only.",
                "operationId": "getTickets",
                "parameters": [
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Global search on ticket token or product name or ticket category",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by ticket status",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "issued",
                                "used",
                                "refunded",
                                "cancelled"
                            ]
                        }
                    },
                    {
                        "name": "user_id",
                        "in": "query",
                        "description": "Filter by user ID",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "user_email",
                        "in": "query",
                        "description": "Filter by user email",
                        "schema": {
                            "type": "string",
                            "format": "email"
                        }
                    },
                    {
                        "name": "product_id",
                        "in": "query",
                        "description": "Filter by product ID",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "payment_uuid",
                        "in": "query",
                        "description": "Filter by payment UUID",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "created_from",
                        "in": "query",
                        "description": "Created on or after (YYYY-MM-DD)",
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "created_to",
                        "in": "query",
                        "description": "Created on or before (YYYY-MM-DD)",
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "updated_from",
                        "in": "query",
                        "description": "Updated on or after (YYYY-MM-DD)",
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "updated_to",
                        "in": "query",
                        "description": "Updated on or before (YYYY-MM-DD)",
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "used_from",
                        "in": "query",
                        "description": "Used on or after (YYYY-MM-DD)",
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "used_to",
                        "in": "query",
                        "description": "Used on or before (YYYY-MM-DD)",
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "refunded_from",
                        "in": "query",
                        "description": "Refunded on or after (YYYY-MM-DD)",
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "refunded_to",
                        "in": "query",
                        "description": "Refunded on or before (YYYY-MM-DD)",
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "cancelled_from",
                        "in": "query",
                        "description": "Cancelled on or after (YYYY-MM-DD)",
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "cancelled_to",
                        "in": "query",
                        "description": "Cancelled on or before (YYYY-MM-DD)",
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page (1–100)",
                        "schema": {
                            "type": "integer",
                            "default": 25,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/TicketResource"
                                            }
                                        },
                                        "meta": {
                                            "properties": {
                                                "current_page": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "last_page": {
                                                    "type": "integer",
                                                    "example": 10
                                                },
                                                "per_page": {
                                                    "type": "integer",
                                                    "example": 25
                                                },
                                                "total": {
                                                    "type": "integer",
                                                    "example": 250
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthenticated"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Tickets"
                ],
                "summary": "Generate free tickets for a user (admin only)",
                "description": "Generates free tickets for a user and product. Only admin can use this endpoint.",
                "operationId": "createFreeTickets",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "user_id",
                                    "product_id",
                                    "quantity"
                                ],
                                "properties": {
                                    "user_id": {
                                        "description": "ID of the existing user",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "product_id": {
                                        "description": "ID of the product/event",
                                        "type": "integer",
                                        "example": 42
                                    },
                                    "quantity": {
                                        "description": "Number of tickets to generate",
                                        "type": "integer",
                                        "example": 2
                                    },
                                    "locale": {
                                        "description": "Language for invoice/tickets",
                                        "type": "string",
                                        "enum": [
                                            "en",
                                            "fr",
                                            "de"
                                        ],
                                        "example": "fr"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/NoContent"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthenticated"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/tickets/user": {
            "get": {
                "tags": [
                    "Tickets"
                ],
                "summary": "List the authenticated user's tickets, paginated",
                "description": "This endpoint retrieves a paginated list of tickets for the authenticated user. It supports optional filtering by product name.",
                "operationId": "2e85d5643b621da67b3fa4533813a2c3",
                "parameters": [
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Search by product name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page (1–100)",
                        "schema": {
                            "type": "integer",
                            "default": 25,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "event_date_from",
                        "in": "query",
                        "description": "Filter tickets for events on or after this date (YYYY-MM-DD)",
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "event_date_to",
                        "in": "query",
                        "description": "Filter tickets for events on or before this date (YYYY-MM-DD)",
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserTicketResource"
                                            }
                                        },
                                        "meta": {
                                            "properties": {
                                                "current_page": {
                                                    "type": "integer"
                                                },
                                                "last_page": {
                                                    "type": "integer"
                                                },
                                                "per_page": {
                                                    "type": "integer"
                                                },
                                                "total": {
                                                    "type": "integer"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthenticated"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/tickets/{filename}": {
            "get": {
                "tags": [
                    "Tickets"
                ],
                "summary": "Download user ticket",
                "description": "Streams the ticket PDF for the logged-in user.",
                "operationId": "downloadTicket",
                "parameters": [
                    {
                        "name": "filename",
                        "in": "path",
                        "description": "Filename of the ticket PDF",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "ticket_5566.pdf"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PDF file download",
                        "content": {
                            "application/pdf": {}
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthenticated"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/tickets/admin/{filename}": {
            "get": {
                "tags": [
                    "Tickets"
                ],
                "summary": "Download ticket (admin)",
                "description": "Allows an administrator to download any ticket PDF by filename.",
                "operationId": "adminDownloadTicket",
                "parameters": [
                    {
                        "name": "filename",
                        "in": "path",
                        "description": "Filename of the ticket PDF",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "ticket_5566.pdf"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PDF file download",
                        "content": {
                            "application/pdf": {}
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthenticated"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/tickets/qr/{filename}": {
            "get": {
                "tags": [
                    "Tickets"
                ],
                "summary": "Download user qr code",
                "description": "Streams the qr code for the logged-in user.",
                "operationId": "downloadQr",
                "parameters": [
                    {
                        "name": "filename",
                        "in": "path",
                        "description": "Filename of the Qr code PNG",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "qr_5566.png"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PNG file download",
                        "content": {
                            "image/png": {}
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthenticated"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/tickets/admin/qr/{filename}": {
            "get": {
                "tags": [
                    "Tickets"
                ],
                "summary": "Download qr code (admin)",
                "description": "Allows an administrator to download any QR code by filename.",
                "operationId": "adminDownloadQr",
                "parameters": [
                    {
                        "name": "filename",
                        "in": "path",
                        "description": "Filename of the Qr code PNG",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "qr_5566.png"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PNG file download",
                        "content": {
                            "image/png": {}
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthenticated"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/tickets/admin/{id}/status": {
            "put": {
                "tags": [
                    "Tickets"
                ],
                "summary": "Update ticket status (admin only)",
                "description": "Updates the status of a ticket. Only admin can use this endpoint.",
                "operationId": "updateTicketStatus",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the ticket to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "status"
                                ],
                                "properties": {
                                    "status": {
                                        "type": "string",
                                        "enum": [
                                            "issued",
                                            "used",
                                            "refunded",
                                            "cancelled"
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/NoContent"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthenticated"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/tickets/scan/{token}": {
            "post": {
                "tags": [
                    "Tickets"
                ],
                "summary": "Scan ticket QR and validate entry",
                "description": "Employee scans a ticket token. If status is `issued`, marks it as `used` and returns user & event info. If already processed, throws 409 with full details.",
                "operationId": "scanTicket",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AcceptLanguageHeader"
                    },
                    {
                        "name": "token",
                        "in": "path",
                        "description": "Unique ticket UUID token from QR code",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "550e8400-e29b-41d4-a716-446655440000"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ticket validated: returns attendee & event info",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "user": {
                                            "properties": {
                                                "firstname": {
                                                    "type": "string",
                                                    "example": "John"
                                                },
                                                "lastname": {
                                                    "type": "string",
                                                    "example": "Doe"
                                                },
                                                "email": {
                                                    "type": "string",
                                                    "example": "john.doe@example.com"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "event": {
                                            "properties": {
                                                "name": {
                                                    "type": "string",
                                                    "example": "Concert Live"
                                                },
                                                "date": {
                                                    "type": "string",
                                                    "format": "date",
                                                    "example": "2024-07-26"
                                                },
                                                "time": {
                                                    "type": "string",
                                                    "format": "time",
                                                    "example": "20:00"
                                                },
                                                "location": {
                                                    "type": "string",
                                                    "example": "Stade de France"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Ticket already processed: returns status, timestamp, attendee & event info",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "used"
                                        },
                                        "timestamp": {
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2025-05-10T15:00:00+02:00"
                                        },
                                        "user": {
                                            "properties": {
                                                "firstname": {
                                                    "type": "string",
                                                    "example": "John"
                                                },
                                                "lastname": {
                                                    "type": "string",
                                                    "example": "Doe"
                                                },
                                                "email": {
                                                    "type": "string",
                                                    "example": "john.doe@example.com"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "event": {
                                            "properties": {
                                                "name": {
                                                    "type": "string",
                                                    "example": "Concert Live"
                                                },
                                                "date": {
                                                    "type": "string",
                                                    "format": "date",
                                                    "example": "2024-07-26"
                                                },
                                                "time": {
                                                    "type": "string",
                                                    "format": "time",
                                                    "example": "20:00"
                                                },
                                                "location": {
                                                    "type": "string",
                                                    "example": "Stade de France"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "code": {
                                            "type": "string",
                                            "example": "ticket_already_processed"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This ticket was already used on 2025-05-10T15:00:00+02:00"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthenticated"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/admin/sales": {
            "get": {
                "tags": [
                    "Tickets"
                ],
                "summary": "Get ticket sales count per product (admin only)",
                "description": "Returns a paginated list of products with the number of tickets sold for each product. Admin only.",
                "operationId": "494f8029a85bf61ff898537a5df48e0b",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AcceptLanguageHeader"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Search by product name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort_by",
                        "in": "query",
                        "description": "Sort by field",
                        "schema": {
                            "type": "string",
                            "default": "sales_count",
                            "enum": [
                                "product_name",
                                "sales_count"
                            ]
                        }
                    },
                    {
                        "name": "sort_order",
                        "in": "query",
                        "description": "Sort direction",
                        "schema": {
                            "type": "string",
                            "default": "desc",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page",
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Paginated list of product sales",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ProductSalesResource"
                                            }
                                        },
                                        "meta": {
                                            "required": [
                                                "current_page",
                                                "last_page",
                                                "per_page",
                                                "total"
                                            ],
                                            "properties": {
                                                "current_page": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "last_page": {
                                                    "type": "integer",
                                                    "example": 5
                                                },
                                                "per_page": {
                                                    "type": "integer",
                                                    "example": 15
                                                },
                                                "total": {
                                                    "type": "integer",
                                                    "example": 73
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthenticated"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Retrieve all users (admin only)",
                "description": "Returns a paginated list of users, filterable by firstname, lastname, email and role.",
                "operationId": "566aed8efb436ca506e0ef51a032ecd9",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page",
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    },
                    {
                        "name": "firstname",
                        "in": "query",
                        "description": "Recherche par prénom (like)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "lastname",
                        "in": "query",
                        "description": "Recherche par nom (like)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "Recherche par email (exact)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "role",
                        "in": "query",
                        "description": "Filtrer par rôle",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "admin",
                                "employee",
                                "user"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Users retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "properties": {
                                                "users": {
                                                    "type": "array",
                                                    "items": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "example": 1
                                                            },
                                                            "firstname": {
                                                                "type": "string",
                                                                "example": "John"
                                                            },
                                                            "lastname": {
                                                                "type": "string",
                                                                "example": "Doe"
                                                            },
                                                            "email": {
                                                                "type": "string",
                                                                "example": "john.doe@example.com"
                                                            },
                                                            "created_at": {
                                                                "type": "string",
                                                                "format": "date-time",
                                                                "example": "2025-05-01T12:00:00Z"
                                                            },
                                                            "updated_at": {
                                                                "type": "string",
                                                                "format": "date-time",
                                                                "example": "2025-05-02T14:30:00Z"
                                                            },
                                                            "role": {
                                                                "type": "string",
                                                                "enum": [
                                                                    "admin",
                                                                    "employee",
                                                                    "user"
                                                                ],
                                                                "example": "admin"
                                                            },
                                                            "twofa_enabled": {
                                                                "type": "boolean",
                                                                "example": true
                                                            },
                                                            "email_verified_at": {
                                                                "type": "string",
                                                                "format": "date-time",
                                                                "example": "2025-05-01T12:00:00Z"
                                                            },
                                                            "is_active": {
                                                                "type": "boolean",
                                                                "example": true
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "meta": {
                                                    "properties": {
                                                        "current_page": {
                                                            "type": "integer",
                                                            "example": 1
                                                        },
                                                        "last_page": {
                                                            "type": "integer",
                                                            "example": 10
                                                        },
                                                        "per_page": {
                                                            "type": "integer",
                                                            "example": 15
                                                        },
                                                        "total": {
                                                            "type": "integer",
                                                            "example": 150
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "links": {
                                                    "properties": {
                                                        "first": {
                                                            "type": "string",
                                                            "example": "…?page=1&per_page=15"
                                                        },
                                                        "last": {
                                                            "type": "string",
                                                            "example": "…?page=10&per_page=15"
                                                        },
                                                        "prev": {
                                                            "type": "string|null",
                                                            "example": "…?page=1&per_page=15"
                                                        },
                                                        "next": {
                                                            "type": "string|null",
                                                            "example": "…?page=2&per_page=15"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/users/{user}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get user details by ID (admin or employee only)",
                "description": "Returns firstname, lastname and email of the specified user. Requires admin or employee privileges.",
                "operationId": "getUserById",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "ID of the user to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "example": 42
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "user": {
                                            "properties": {
                                                "firstname": {
                                                    "type": "string",
                                                    "example": "Jane"
                                                },
                                                "lastname": {
                                                    "type": "string",
                                                    "example": "Smith"
                                                },
                                                "email": {
                                                    "type": "string",
                                                    "format": "email",
                                                    "example": "jane.smith@example.com"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthenticated"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Users"
                ],
                "summary": "Modify a user's details (admin only)",
                "description": "Allows an administrator to update a user's status, 2FA setting, name, email, role or verified email.",
                "operationId": "updateUserByAdmin",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "ID of the user to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "example": 123
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "is_active": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "twofa_enabled": {
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "firstname": {
                                        "type": "string",
                                        "example": "Alice"
                                    },
                                    "lastname": {
                                        "type": "string",
                                        "example": "Dupont"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "alice@example.com"
                                    },
                                    "role": {
                                        "type": "string",
                                        "enum": [
                                            "admin",
                                            "employee",
                                            "user"
                                        ],
                                        "example": "employee"
                                    },
                                    "verify_email": {
                                        "type": "boolean",
                                        "example": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "User updated successfully, no content"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthenticated"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/users/me": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get current user profile",
                "description": "Returns the authenticated user's firstname, lastname, email, and 2FA status.",
                "operationId": "getCurrentUserProfile",
                "responses": {
                    "200": {
                        "description": "Profile retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "user": {
                                            "properties": {
                                                "firstname": {
                                                    "type": "string",
                                                    "example": "John"
                                                },
                                                "lastname": {
                                                    "type": "string",
                                                    "example": "Doe"
                                                },
                                                "email": {
                                                    "type": "string",
                                                    "format": "email",
                                                    "example": "john.doe@example.com"
                                                },
                                                "twofa_enabled": {
                                                    "type": "boolean",
                                                    "example": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthenticated"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Users"
                ],
                "summary": "Modify current user firstname and lastname",
                "description": "Allows an authenticated user to update their firstname and lastname.",
                "operationId": "updateCurrentUserName",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "firstname",
                                    "lastname"
                                ],
                                "properties": {
                                    "firstname": {
                                        "type": "string",
                                        "example": "Alice"
                                    },
                                    "lastname": {
                                        "type": "string",
                                        "example": "Dupont"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Name updated successfully, no content"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthenticated"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/users/email/{user}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Check pending email change for a user (admin only)",
                "description": "Admin-only. Returns the pending email update data for the specified user, or null if none.",
                "operationId": "checkEmailUpdate",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "ID of the user to check",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Pending email update retrieved or none",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "nullable": true,
                                            "oneOf": [
                                                {
                                                    "title": "EmailUpdate",
                                                    "properties": {
                                                        "old_email": {
                                                            "type": "string",
                                                            "format": "email",
                                                            "example": "old@example.com"
                                                        },
                                                        "new_email": {
                                                            "type": "string",
                                                            "format": "email",
                                                            "example": "new@example.com"
                                                        },
                                                        "created_at": {
                                                            "type": "string",
                                                            "format": "date-time",
                                                            "example": "2025-05-02T12:00:00Z"
                                                        },
                                                        "updated_at": {
                                                            "type": "string",
                                                            "format": "date-time",
                                                            "example": "2025-05-03T12:00:00Z"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ]
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Checked pending email update"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthenticated"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/users/employees": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Create a new employee (admin only)",
                "description": "Allows an administrator to create a new employee account.\nThe new user is immediately active and email‐verified. Password must meet security requirements.",
                "operationId": "createEmployee",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "firstname",
                                    "lastname",
                                    "email",
                                    "password",
                                    "password_confirmation"
                                ],
                                "properties": {
                                    "firstname": {
                                        "type": "string",
                                        "example": "Alice"
                                    },
                                    "lastname": {
                                        "type": "string",
                                        "example": "Dupont"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "alice@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "Str0ngP@ssword2025!"
                                    },
                                    "password_confirmation": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "Str0ngP@ssword2025!"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Employee created successfully, no content"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthenticated"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/auth/register": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new user",
                "description": "\nThis endpoint allows a visitor to create a new user account with built-in protections:\n- **Strong password enforcement**: minimum 15 characters, mixed case, numbers & symbols\n- **Google reCAPTCHA** verification to block bots and automated abuse\n- **Throttling** (e.g. 5 requests/minute) to limit spam & brute-force attempts\n- **Email confirmation**: a verification link is sent after registration\n",
                "operationId": "registerUser",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AcceptLanguageHeader"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegisterUser"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User created successfully. Verification Email sent.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Registration successful. Please check your emails."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    }
                }
            }
        },
        "/api/auth/login": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Authenticate user",
                "description": "\nThis endpoint allows a user to log in and receive an authentication token:\n\n- **Email & password** credentials are required\n- **Remember me** option for extended session duration (1 week)\n- **Two-factor authentication (2FA)** code if enabled\n- **Throttling** to limit brute-force attempts\n    ",
                "operationId": "authLogin",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AcceptLanguageHeader"
                    }
                ],
                "requestBody": {
                    "description": "User login credentials",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "user@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "MyGreatPassword@123"
                                    },
                                    "remember": {
                                        "description": "Stay logged in for one week",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "twofa_code": {
                                        "description": "2FA code if enabled",
                                        "type": "string",
                                        "example": "123456"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Authentication successful. Returns a token and user information.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Logged in successfully"
                                        },
                                        "token": {
                                            "type": "string",
                                            "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJI…"
                                        },
                                        "user": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "firstname": {
                                                    "type": "string",
                                                    "example": "John"
                                                },
                                                "lastname": {
                                                    "type": "string",
                                                    "example": "Doe"
                                                },
                                                "email": {
                                                    "type": "string",
                                                    "example": "user@example.com"
                                                },
                                                "role": {
                                                    "type": "string",
                                                    "example": "user"
                                                },
                                                "twofa_enabled": {
                                                    "type": "boolean",
                                                    "example": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request: email not verified or 2FA missing/invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "required": [
                                                "message",
                                                "code"
                                            ],
                                            "properties": {
                                                "message": {
                                                    "type": "string",
                                                    "example": "Email address not verified"
                                                },
                                                "code": {
                                                    "type": "string",
                                                    "example": "email_not_verified"
                                                },
                                                "resend_verification_url": {
                                                    "description": "URL to call to resend the verification email",
                                                    "type": "string",
                                                    "format": "url",
                                                    "example": "https://api.example.com/api/auth/email/resend"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        {
                                            "required": [
                                                "message",
                                                "code"
                                            ],
                                            "properties": {
                                                "message": {
                                                    "type": "string",
                                                    "example": "Two-factor authentication code is required"
                                                },
                                                "code": {
                                                    "type": "string",
                                                    "example": "twofa_required"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        {
                                            "required": [
                                                "message",
                                                "code"
                                            ],
                                            "properties": {
                                                "message": {
                                                    "type": "string",
                                                    "example": "Invalid two-factor authentication code"
                                                },
                                                "code": {
                                                    "type": "string",
                                                    "example": "twofa_invalid"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized (invalid credentials)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid credentials"
                                        },
                                        "code": {
                                            "type": "string",
                                            "example": "invalid_credentials"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden (account disabled)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Account disabled"
                                        },
                                        "code": {
                                            "type": "string",
                                            "example": "account_disabled"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    }
                }
            }
        },
        "/api/auth/2fa/enable": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Enable two-factor authentication",
                "description": "\nGenerates a new secret key for two-factor authentication and returns an OTP-Auth URL.\nRequires the user to be authenticated via Bearer token.\n",
                "operationId": "authEnableTwoFactor",
                "responses": {
                    "200": {
                        "description": "Two-factor authentication enabled successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "secret": {
                                            "description": "Generated secret key for 2FA",
                                            "type": "string",
                                            "example": "JBSWY3DPEHPK3PXP"
                                        },
                                        "qrCodeUrl": {
                                            "description": "URL to generate QR code for 2FA",
                                            "type": "string",
                                            "example": "otpauth://totp/Example%3Auser%40example.com?secret=JBSWY3DPEHPK3PXP&issuer=Example"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Two-factor authentication already enabled",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Two-factor authentication is already enabled"
                                        },
                                        "code": {
                                            "type": "string",
                                            "example": "twofa_already_enabled"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthenticated"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/auth/logout": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Revoke the current authentication token",
                "description": "Revokes the token used for authentication. Requires a valid Bearer token.",
                "operationId": "authLogout",
                "responses": {
                    "200": {
                        "description": "Logout successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Logged out successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request (no active token)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "No active token found"
                                        },
                                        "code": {
                                            "type": "string",
                                            "example": "no_active_token"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthenticated"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/auth/password/forgot": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Send password reset link",
                "description": "\nSends an email containing a password reset link to the user.\n\n- Requires a valid email of an existing user.\n- Response does not reveal if the email is registered, to prevent enumeration.\n    ",
                "operationId": "authForgotPassword",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AcceptLanguageHeader"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "user@example.com"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Reset link sent successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Password reset link sent"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "description": "Internal server error or email send failure",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unable to send reset link"
                                        },
                                        "code": {
                                            "type": "string",
                                            "example": "reset_link_failed"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/password/reset": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Reset password with token",
                "description": "\nAllows a user to reset their password using a valid reset token:\n\n- `token`: the password reset token\n- `email`: user’s email (must exist)\n- `password` + `password_confirmation`: new secure password (min 15 chars, mixed case, numbers, symbols)\n",
                "operationId": "authResetPassword",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "token",
                                    "email",
                                    "password",
                                    "password_confirmation"
                                ],
                                "properties": {
                                    "token": {
                                        "type": "string",
                                        "example": "abcdef123456"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "user@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "StrongP@ssword2025!"
                                    },
                                    "password_confirmation": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "StrongP@ssword2025!"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password successfully reset",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Password has been reset successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid or expired token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid password reset token"
                                        },
                                        "code": {
                                            "type": "string",
                                            "example": "invalid_token"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Email not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "No user found with this email"
                                        },
                                        "code": {
                                            "type": "string",
                                            "example": "user_not_found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unexpected error during password reset"
                                        },
                                        "code": {
                                            "type": "string",
                                            "example": "internal_error"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/password": {
            "patch": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Change password",
                "description": "\nAllows an authenticated user to change their password:\n\n- Provide `current_password` to verify identity\n- Set a new secure password (min. 15 chars, mixed case, numbers & symbols)\n",
                "operationId": "authUpdatePassword",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "current_password",
                                    "password",
                                    "password_confirmation"
                                ],
                                "properties": {
                                    "current_password": {
                                        "description": "The current password of the user",
                                        "type": "string",
                                        "example": "StrongP@ssword2025!"
                                    },
                                    "password": {
                                        "description": "The new password to be set for the user",
                                        "type": "string",
                                        "example": "NewP@ssword2025!"
                                    },
                                    "password_confirmation": {
                                        "description": "Confirmation of the new password",
                                        "type": "string",
                                        "example": "NewP@ssword2025!"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Password changed successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid current password",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Current password is incorrect"
                                        },
                                        "code": {
                                            "type": "string",
                                            "example": "invalid_current_password"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthenticated"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/auth/email": {
            "patch": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Request email update",
                "description": "\nSends a verification link to the new email address and notifies the old address.\nRequires authentication via Bearer token.\n",
                "operationId": "authUpdateEmail",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AcceptLanguageHeader"
                    }
                ],
                "requestBody": {
                    "description": "New unique email address",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "new.email@example.com"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Verification email sent to the new address",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Verification email sent to the new address"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthenticated"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/auth/2fa/disable": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Disable two-factor authentication",
                "description": "Disables 2FA for the authenticated user after verifying the provided 2FA code.",
                "operationId": "disableTwoFactor",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "twofa_code"
                                ],
                                "properties": {
                                    "twofa_code": {
                                        "description": "Current 2FA code from the authenticator app",
                                        "type": "string",
                                        "example": "123456"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Two-factor authentication disabled successfully, no content"
                    },
                    "400": {
                        "description": "Invalid or missing 2FA code, or 2FA not enabled",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "required": [
                                                "message",
                                                "code"
                                            ],
                                            "properties": {
                                                "message": {
                                                    "type": "string",
                                                    "example": "Two-factor authentication is not enabled"
                                                },
                                                "code": {
                                                    "type": "string",
                                                    "example": "twofa_not_enabled"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        {
                                            "required": [
                                                "message",
                                                "code"
                                            ],
                                            "properties": {
                                                "message": {
                                                    "type": "string",
                                                    "example": "Invalid two-factor authentication code"
                                                },
                                                "code": {
                                                    "type": "string",
                                                    "example": "twofa_invalid_code"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthenticated"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/auth/email/verify/{id}/{hash}": {
            "get": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Verify user email",
                "description": "\nValidates the email verification link.\n- In **production**, redirects the user to the frontend at `/verification-result/{success|invalid|already-verified|error}`.\n- In **non-production**, returns a JSON payload with `message` and `redirect_url`.\n",
                "operationId": "authVerifyEmail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user to verify",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "example": 1
                        }
                    },
                    {
                        "name": "hash",
                        "in": "path",
                        "description": "SHA1 hash from the verification link",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "abc123hashsecure"
                        }
                    },
                    {
                        "name": "expires",
                        "in": "query",
                        "description": "Expiration timestamp of the signed URL",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1714687561
                        }
                    },
                    {
                        "name": "signature",
                        "in": "query",
                        "description": "Signature of the signed URL",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "a94a8fe5ccb19ba61c4c0873d391e987982fbbd3"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email verified successfully (JSON response in non-production)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Email verified successfully"
                                        },
                                        "redirect_url": {
                                            "description": "Used for redirection only in production. In development, a JSON response will be returned.",
                                            "type": "string",
                                            "example": "https://frontend.example.com/verification-result/success"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "302": {
                        "description": "Redirect to frontend verification result page (production)",
                        "headers": {
                            "Location": {
                                "description": "Redirect URL",
                                "schema": {
                                    "type": "string",
                                    "example": "https://frontend.example.com/verification-result/success"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid verification link",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid verification link"
                                        },
                                        "code": {
                                            "type": "string",
                                            "example": "invalid_verification_link"
                                        },
                                        "redirect_url": {
                                            "type": "string",
                                            "example": "https://frontend.example.com/verification-result/invalid"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        },
                                        "code": {
                                            "type": "string",
                                            "example": "user_not_found"
                                        },
                                        "redirect_url": {
                                            "type": "string",
                                            "example": "https://frontend.example.com/verification-result/invalid"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Email already verified",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Email already verified"
                                        },
                                        "code": {
                                            "type": "string",
                                            "example": "already_verified"
                                        },
                                        "redirect_url": {
                                            "type": "string",
                                            "example": "https://frontend.example.com/verification-result/already-verified"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unexpected error"
                                        },
                                        "code": {
                                            "type": "string",
                                            "example": "internal_error"
                                        },
                                        "redirect_url": {
                                            "type": "string",
                                            "example": "https://frontend.example.com/verification-result/error"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/email/resend": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Resend verification email",
                "description": "Sends a new email verification link to an not authenticated user.",
                "operationId": "authResendVerificationEmail",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AcceptLanguageHeader"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "user@example.com"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Verification email resent successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Verification email resent"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/UserNotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/AlreadyVerified"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalError"
                    }
                }
            }
        },
        "/api/auth/email/change/verify": {
            "get": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Verify new email address",
                "description": "\nValidates the token for a pending email change.\n- In **production**, redirects to the front at `/verification-result/{success|invalid|error}`.\n- In **non-production**, returns JSON with `message` and `redirect_url`.\n",
                "operationId": "authVerifyNewEmail",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "Raw verification token from the email link",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "03AGdBq26…"
                        }
                    },
                    {
                        "name": "expires",
                        "in": "query",
                        "description": "Expiration timestamp of the signed URL",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1714687561
                        }
                    },
                    {
                        "name": "signature",
                        "in": "query",
                        "description": "Signature of the signed URL",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "a94a8fe5ccb19ba61c4c0873d391e987982fbbd3"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email updated successfully (JSON in non-production)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Email updated successfully"
                                        },
                                        "redirect_url": {
                                            "type": "string",
                                            "example": "https://frontend.example.com/verification-result/success"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "302": {
                        "description": "Redirect to frontend result page (production)",
                        "headers": {
                            "Location": {
                                "description": "Redirect URL",
                                "schema": {
                                    "type": "string",
                                    "example": "https://frontend.example.com/verification-result/success"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing or invalid token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid or expired verification token"
                                        },
                                        "code": {
                                            "type": "string",
                                            "example": "verification_token_missing"
                                        },
                                        "redirect_url": {
                                            "type": "string",
                                            "example": "https://frontend.example.com/verification-result/invalid"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Email request not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Email request not found"
                                        },
                                        "code": {
                                            "type": "string",
                                            "example": "email_not_found"
                                        },
                                        "redirect_url": {
                                            "type": "string",
                                            "example": "https://frontend.example.com/verification-result/invalid"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unexpected error"
                                        },
                                        "code": {
                                            "type": "string",
                                            "example": "internal_error"
                                        },
                                        "redirect_url": {
                                            "type": "string",
                                            "example": "https://frontend.example.com/verification-result/error"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/email/change/cancel/{token}/{old_email}": {
            "get": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Cancel email change request",
                "description": "\nValidates the token for a pending email change and restores the old email during 48 hours.\n- In **production**, redirects the user to `/verification-result/{success|invalid|error}`.\n- In **non-production**, returns JSON with `message` and `redirect_url`.\n",
                "operationId": "authCancelEmailUpdate",
                "parameters": [
                    {
                        "name": "token",
                        "in": "path",
                        "description": "Raw token from the email update link",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "03AGdBq26…"
                        }
                    },
                    {
                        "name": "old_email",
                        "in": "path",
                        "description": "Previous email address before the update",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "email",
                            "example": "old.user@example.com"
                        }
                    },
                    {
                        "name": "expires",
                        "in": "query",
                        "description": "Expiration timestamp of the signed URL",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1714687561
                        }
                    },
                    {
                        "name": "signature",
                        "in": "query",
                        "description": "Signature of the signed URL",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "a94a8fe5ccb19ba61c4c0873d391e987982fbbd3"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email update canceled successfully (JSON in non-production)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Email update canceled"
                                        },
                                        "redirect_url": {
                                            "type": "string",
                                            "example": "https://frontend.example.com/verification-result/success"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "302": {
                        "description": "Redirect to frontend result page (production)",
                        "headers": {
                            "Location": {
                                "description": "Redirect URL",
                                "schema": {
                                    "type": "string",
                                    "example": "https://frontend.example.com/verification-result/success"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Email update request not found or already processed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Email update request not found"
                                        },
                                        "code": {
                                            "type": "string",
                                            "example": "email_update_not_found"
                                        },
                                        "redirect_url": {
                                            "type": "string",
                                            "example": "https://frontend.example.com/verification-result/invalid"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unexpected error"
                                        },
                                        "code": {
                                            "type": "string",
                                            "example": "internal_error"
                                        },
                                        "redirect_url": {
                                            "type": "string",
                                            "example": "https://frontend.example.com/verification-result/error"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "RegisterUser": {
                "required": [
                    "firstname",
                    "lastname",
                    "email",
                    "password",
                    "password_confirmation",
                    "captcha_token"
                ],
                "properties": {
                    "firstname": {
                        "type": "string",
                        "example": "Jean"
                    },
                    "lastname": {
                        "type": "string",
                        "example": "Dupont"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "example": "jean.dupont@example.com"
                    },
                    "password": {
                        "type": "string",
                        "format": "password",
                        "example": "Str0ngP@ssw0rd!"
                    },
                    "password_confirmation": {
                        "type": "string",
                        "format": "password",
                        "example": "Str0ngP@ssw0rd!"
                    },
                    "captcha_token": {
                        "type": "string",
                        "example": "03AGdBq24…"
                    },
                    "accept_terms": {
                        "type": "boolean",
                        "example": true
                    }
                },
                "type": "object"
            },
            "StoreProductSingleLocale": {
                "required": [
                    "name",
                    "price",
                    "stock_quantity",
                    "product_details"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Billet concert"
                    },
                    "price": {
                        "type": "number",
                        "format": "float",
                        "example": 49.99
                    },
                    "sale": {
                        "type": "number",
                        "format": "float",
                        "example": 39.99
                    },
                    "stock_quantity": {
                        "type": "integer",
                        "example": 100
                    },
                    "product_details": {
                        "$ref": "#/components/schemas/StoreProductDetailsSingleLocale"
                    }
                },
                "type": "object"
            },
            "StoreProductDetailsSingleLocale": {
                "required": [
                    "places",
                    "description",
                    "date",
                    "time",
                    "location",
                    "category",
                    "image_url"
                ],
                "properties": {
                    "places": {
                        "type": "integer",
                        "example": 2
                    },
                    "description": {
                        "type": "string",
                        "example": "Description détaillée…"
                    },
                    "date": {
                        "type": "string",
                        "format": "date",
                        "example": "2024-07-26"
                    },
                    "time": {
                        "type": "string",
                        "example": "19:30"
                    },
                    "location": {
                        "type": "string",
                        "example": "Stade de France"
                    },
                    "category": {
                        "type": "string",
                        "example": "Cérémonies"
                    },
                    "image_url": {
                        "type": "string",
                        "format": "url",
                        "example": "https://…/image.jpg"
                    }
                },
                "type": "object"
            },
            "CartItemMinimal": {
                "title": "CartItemMinimal",
                "required": [
                    "id",
                    "quantity",
                    "unit_price",
                    "total_price",
                    "product"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 7
                    },
                    "product_id": {
                        "type": "integer",
                        "example": 42
                    },
                    "quantity": {
                        "type": "integer",
                        "example": 3
                    },
                    "in_stock": {
                        "type": "boolean",
                        "example": true
                    },
                    "available_quantity": {
                        "type": "integer",
                        "example": 5
                    },
                    "unit_price": {
                        "type": "number",
                        "format": "float",
                        "example": 53.99
                    },
                    "total_price": {
                        "type": "number",
                        "format": "float",
                        "example": 161.97
                    },
                    "discount_rate": {
                        "type": "number",
                        "format": "float",
                        "example": 0.1,
                        "nullable": true
                    },
                    "original_price": {
                        "type": "number",
                        "format": "float",
                        "example": 59.99,
                        "nullable": true
                    },
                    "product": {
                        "required": [
                            "name",
                            "image",
                            "date",
                            "location"
                        ],
                        "properties": {
                            "name": {
                                "type": "string",
                                "example": "Billet concert"
                            },
                            "image": {
                                "type": "string",
                                "example": "name-of-image.jpg"
                            },
                            "date": {
                                "type": "string",
                                "format": "date",
                                "example": "2024-07-26"
                            },
                            "location": {
                                "type": "string",
                                "example": "Stade de France"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "CartMinimal": {
                "title": "CartMinimal",
                "required": [
                    "id",
                    "user_id",
                    "cart_items"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "user_id": {
                        "type": "integer",
                        "example": 42
                    },
                    "cart_items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CartItemMinimal"
                        }
                    }
                },
                "type": "object"
            },
            "PaymentInitiationPaid": {
                "properties": {
                    "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "example": "550e8400-e29b-41d4-a716-446655440000"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "pending",
                            "paid",
                            "failed",
                            "refunded"
                        ],
                        "example": "paid"
                    },
                    "transaction_id": {
                        "type": "string",
                        "example": "pi_abc123"
                    },
                    "client_secret": {
                        "type": "string",
                        "example": "cs_test_456"
                    }
                },
                "type": "object"
            },
            "PaymentInitiationPending": {
                "properties": {
                    "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "example": "550e8400-e29b-41d4-a716-446655440000"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "pending",
                            "paid",
                            "failed",
                            "refunded"
                        ],
                        "example": "pending"
                    },
                    "transaction_id": {
                        "type": "string",
                        "example": "pi_abc123"
                    },
                    "client_secret": {
                        "type": "string",
                        "example": "cs_test_456"
                    }
                },
                "type": "object"
            },
            "PaymentResource": {
                "title": "PaymentResource",
                "properties": {
                    "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "example": "550e8400-e29b-41d4-a716-446655440000"
                    },
                    "invoice_link": {
                        "type": "string",
                        "example": "https://example.com/invoice/12345"
                    },
                    "cart_snapshot": {
                        "description": "Localized snapshot of the cart as seen by the admin",
                        "type": "array",
                        "items": {
                            "required": [
                                "product_id",
                                "product_name",
                                "ticket_type",
                                "ticket_places",
                                "quantity",
                                "unit_price",
                                "discount_rate",
                                "discounted_price"
                            ],
                            "properties": {
                                "product_id": {
                                    "type": "integer",
                                    "example": 42
                                },
                                "product_name": {
                                    "type": "string",
                                    "example": "Billet concert"
                                },
                                "ticket_type": {
                                    "type": "string",
                                    "example": "adult"
                                },
                                "ticket_places": {
                                    "type": "integer",
                                    "example": 2
                                },
                                "quantity": {
                                    "type": "integer",
                                    "example": 2
                                },
                                "unit_price": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 50
                                },
                                "discount_rate": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 0.1
                                },
                                "discounted_price": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 45
                                }
                            },
                            "type": "object"
                        }
                    },
                    "amount": {
                        "type": "number",
                        "format": "float",
                        "example": 130
                    },
                    "payment_method": {
                        "type": "string",
                        "enum": [
                            "paypal",
                            "stripe",
                            "free"
                        ],
                        "example": "paypal"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "pending",
                            "paid",
                            "failed",
                            "refunded"
                        ],
                        "example": "paid"
                    },
                    "transaction_id": {
                        "type": "string",
                        "example": "pi_abc123",
                        "nullable": true
                    },
                    "paid_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-04-01T12:00:00Z",
                        "nullable": true
                    },
                    "refunded_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-04-02T15:00:00Z",
                        "nullable": true
                    },
                    "refunded_amount": {
                        "type": "number",
                        "format": "float",
                        "example": 50,
                        "nullable": true
                    },
                    "user": {
                        "required": [
                            "id",
                            "email"
                        ],
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": 1
                            },
                            "email": {
                                "type": "string",
                                "format": "email",
                                "example": "user@example.com"
                            }
                        },
                        "type": "object"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-01-01T00:00:00Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-04-01T12:00:00Z"
                    }
                },
                "type": "object"
            },
            "ProductDetails": {
                "title": "ProductDetails",
                "required": [
                    "places",
                    "description",
                    "date",
                    "time",
                    "location",
                    "category",
                    "image"
                ],
                "properties": {
                    "places": {
                        "type": "integer",
                        "example": 1
                    },
                    "description": {
                        "type": "string",
                        "example": "Assistez à un moment historique…"
                    },
                    "date": {
                        "type": "string",
                        "format": "date",
                        "example": "2024-07-26"
                    },
                    "time": {
                        "type": "string",
                        "example": "19h30"
                    },
                    "location": {
                        "type": "string",
                        "example": "Stade de France"
                    },
                    "category": {
                        "type": "string",
                        "example": "Cérémonies"
                    },
                    "image": {
                        "type": "string",
                        "example": "image.png"
                    }
                },
                "type": "object"
            },
            "MinimalProduct": {
                "title": "MinimalProduct",
                "required": [
                    "id",
                    "name",
                    "price",
                    "sale",
                    "stock_quantity",
                    "product_details"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Sample Product"
                    },
                    "price": {
                        "type": "number",
                        "format": "float",
                        "example": 49.99
                    },
                    "sale": {
                        "type": "number",
                        "format": "float",
                        "example": 0.1
                    },
                    "stock_quantity": {
                        "type": "integer",
                        "example": 20
                    },
                    "product_details": {
                        "$ref": "#/components/schemas/ProductDetails"
                    }
                },
                "type": "object"
            },
            "ProductSalesResource": {
                "properties": {
                    "product_id": {
                        "type": "integer",
                        "example": 42
                    },
                    "product_name": {
                        "type": "string",
                        "example": "Concert VIP Ticket"
                    },
                    "sales_count": {
                        "type": "integer",
                        "example": 128
                    }
                },
                "type": "object"
            },
            "TicketResource": {
                "title": "TicketResource",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "token": {
                        "type": "string",
                        "example": "550e8400-e29b-41d4-a716-446655440000"
                    },
                    "product_snapshot": {
                        "required": [
                            "product_id",
                            "product_name",
                            "ticket_type",
                            "ticket_places",
                            "quantity",
                            "unit_price",
                            "discount_rate",
                            "discounted_price"
                        ],
                        "properties": {
                            "product_id": {
                                "type": "integer",
                                "example": 42
                            },
                            "product_name": {
                                "type": "string",
                                "example": "Billet concert"
                            },
                            "ticket_type": {
                                "type": "string",
                                "example": "adult"
                            },
                            "ticket_places": {
                                "type": "integer",
                                "example": 2
                            },
                            "quantity": {
                                "type": "integer",
                                "example": 2
                            },
                            "unit_price": {
                                "type": "number",
                                "format": "float",
                                "example": 50
                            },
                            "discount_rate": {
                                "type": "number",
                                "format": "float",
                                "example": 0.1
                            },
                            "discounted_price": {
                                "type": "number",
                                "format": "float",
                                "example": 45
                            }
                        },
                        "type": "object"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "issued",
                            "used",
                            "refunded",
                            "cancelled"
                        ],
                        "example": "issued"
                    },
                    "used_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-05-10T14:00:00Z",
                        "nullable": true
                    },
                    "refunded_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": null,
                        "nullable": true
                    },
                    "cancelled_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": null,
                        "nullable": true
                    },
                    "qr_filename": {
                        "type": "string",
                        "example": "qr_123e4567-e89b-12d3-a456-426614174000.png"
                    },
                    "pdf_filename": {
                        "type": "string",
                        "example": "ticket_123e4567-e89b-12d3-a456-426614174000.pdf"
                    },
                    "user": {
                        "required": [
                            "id",
                            "firstname",
                            "lastname",
                            "email"
                        ],
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": 1
                            },
                            "firstname": {
                                "type": "string",
                                "example": "Jean"
                            },
                            "lastname": {
                                "type": "string",
                                "example": "Dupont"
                            },
                            "email": {
                                "type": "string",
                                "format": "email",
                                "example": "jean.dupont@example.com"
                            }
                        },
                        "type": "object"
                    },
                    "payment": {
                        "required": [
                            "id",
                            "uuid",
                            "status"
                        ],
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": 42
                            },
                            "uuid": {
                                "type": "string",
                                "format": "uuid",
                                "example": "550e8400-e29b-41d4-a716-446655440000"
                            },
                            "status": {
                                "type": "string",
                                "example": "paid"
                            }
                        },
                        "type": "object"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-05-10T12:00:00Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-05-10T12:30:00Z"
                    }
                },
                "type": "object"
            },
            "UserResource": {
                "title": "UserResource",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "firstname": {
                        "type": "string",
                        "example": "John"
                    },
                    "lastname": {
                        "type": "string",
                        "example": "Doe"
                    },
                    "email": {
                        "type": "string",
                        "example": "john.doe@example.com"
                    },
                    "role": {
                        "type": "string",
                        "enum": [
                            "admin",
                            "employee",
                            "user"
                        ],
                        "example": "admin"
                    },
                    "twofa_enabled": {
                        "type": "boolean",
                        "example": true
                    },
                    "is_active": {
                        "type": "boolean",
                        "example": true
                    },
                    "email_verified_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-05-10T12:00:00Z",
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-05-10T12:00:00Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-05-10T12:00:00Z"
                    }
                },
                "type": "object"
            },
            "UserTicketResource": {
                "title": "UserTicketResource",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "token": {
                        "type": "string",
                        "example": "550e8400-e29b-41d4-a716-446655440000"
                    },
                    "payment_uuid": {
                        "type": "string",
                        "format": "uuid",
                        "example": "550e8400-e29b-41d4-a716-446655440000"
                    },
                    "product_snapshot": {
                        "required": [
                            "product_id",
                            "product_name",
                            "ticket_type",
                            "ticket_places",
                            "quantity",
                            "unit_price",
                            "discount_rate",
                            "discounted_price"
                        ],
                        "properties": {
                            "product_id": {
                                "type": "integer",
                                "example": 42
                            },
                            "product_name": {
                                "type": "string",
                                "example": "Billet concert"
                            },
                            "ticket_type": {
                                "type": "string",
                                "example": "adult"
                            },
                            "ticket_places": {
                                "type": "integer",
                                "example": 2
                            },
                            "quantity": {
                                "type": "integer",
                                "example": 2
                            },
                            "unit_price": {
                                "type": "number",
                                "format": "float",
                                "example": 50
                            },
                            "discount_rate": {
                                "type": "number",
                                "format": "float",
                                "example": 0.1
                            },
                            "discounted_price": {
                                "type": "number",
                                "format": "float",
                                "example": 45
                            }
                        },
                        "type": "object"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "issued",
                            "used",
                            "refunded",
                            "cancelled"
                        ],
                        "example": "issued"
                    },
                    "used_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-05-10T14:00:00Z",
                        "nullable": true
                    },
                    "refunded_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "cancelled_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "qr_filename": {
                        "type": "string",
                        "example": "qr_…png"
                    },
                    "pdf_filename": {
                        "type": "string",
                        "example": "ticket_…pdf"
                    }
                },
                "type": "object"
            },
            "Cart": {
                "required": [
                    "id",
                    "user_id"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "user_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "cart_items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CartItem"
                        }
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-01-01T00:00:00Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-04-01T12:00:00Z"
                    }
                },
                "type": "object"
            },
            "CartItem": {
                "required": [
                    "id",
                    "quantity",
                    "cart_id",
                    "product_id"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "quantity": {
                        "type": "integer",
                        "example": 2
                    },
                    "cart_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "product_id": {
                        "type": "integer",
                        "example": 5
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-01-01T00:00:00Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-01-01T12:00:00Z"
                    },
                    "product": {
                        "$ref": "#/components/schemas/Product"
                    }
                },
                "type": "object"
            },
            "EmailUpdate": {
                "required": [
                    "id",
                    "user_id",
                    "old_email",
                    "new_email",
                    "token"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "user_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "old_email": {
                        "type": "string",
                        "example": "old.email@example.com"
                    },
                    "new_email": {
                        "type": "string",
                        "example": "new.email@example.com"
                    },
                    "token": {
                        "type": "string",
                        "example": "1234567890abcdef"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-01-01T00:00:00Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-01-01T00:00:00Z"
                    }
                },
                "type": "object"
            },
            "Payment": {
                "required": [
                    "id",
                    "uuid",
                    "invoice_link",
                    "cart_snapshot",
                    "amount",
                    "payment_method",
                    "status",
                    "user_id"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "uuid": {
                        "type": "string",
                        "example": "550e8400-e29b-41d4-a716-446655440000"
                    },
                    "invoice_link": {
                        "type": "string",
                        "example": "http://example.com/invoice/12345"
                    },
                    "cart_snapshot": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "amount": {
                        "type": "number",
                        "format": "float",
                        "example": 100
                    },
                    "payment_method": {
                        "type": "string",
                        "enum": [
                            "paypal",
                            "stripe",
                            "free"
                        ],
                        "example": "paypal"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "pending",
                            "paid",
                            "failed",
                            "refunded"
                        ],
                        "example": "paid"
                    },
                    "transaction_id": {
                        "type": "string",
                        "example": "pi_abc123"
                    },
                    "client_secret": {
                        "type": "string",
                        "example": "cs_test_456"
                    },
                    "paid_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-04-01T12:00:00Z"
                    },
                    "refunded_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-04-02T15:00:00Z"
                    },
                    "refunded_amount": {
                        "type": "number",
                        "format": "float",
                        "example": 50
                    },
                    "user_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-01-01T00:00:00Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-04-01T12:00:00Z"
                    },
                    "tickets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Ticket"
                        }
                    }
                },
                "type": "object"
            },
            "Product": {
                "required": [
                    "id",
                    "name",
                    "price",
                    "stock_quantity"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "description": "Localized product name based on Accept-Language header",
                        "type": "string",
                        "example": "Billet concert"
                    },
                    "product_details": {
                        "description": "Localized details object",
                        "type": "object",
                        "example": {
                            "places": 1,
                            "description": "Assistez à un moment historique ...",
                            "date": "2024-07-26",
                            "time": "19h30 (accès recommandé dès 18h00)",
                            "location": "Stade de France, Saint-Denis",
                            "category": "Cérémonies",
                            "image": "https://picsum.photos/seed/1/600/400"
                        }
                    },
                    "price": {
                        "type": "number",
                        "format": "float",
                        "example": 59.99
                    },
                    "sale": {
                        "type": "number",
                        "format": "float",
                        "example": 49.99
                    },
                    "stock_quantity": {
                        "type": "integer",
                        "example": 100
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "tickets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Ticket"
                        }
                    },
                    "cart_items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CartItem"
                        }
                    }
                },
                "type": "object"
            },
            "ProductTranslation": {
                "required": [
                    "id",
                    "product_id",
                    "locale",
                    "name"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "product_id": {
                        "description": "ID du produit parent",
                        "type": "integer",
                        "example": 42
                    },
                    "locale": {
                        "description": "Code de la langue de la traduction",
                        "type": "string",
                        "example": "fr"
                    },
                    "name": {
                        "type": "string",
                        "example": "Cérémonie d’ouverture officielle des JO"
                    },
                    "product_details": {
                        "description": "Détails localisés du produit",
                        "properties": {
                            "places": {
                                "type": "integer",
                                "example": 1
                            },
                            "description": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "example": [
                                    "Assistez à un moment historique avec la cérémonie d’ouverture des Jeux Olympiques de Paris 2024.",
                                    "Vivez une soirée exceptionnelle où le sport, la culture et l’émotion se rencontrent..."
                                ]
                            },
                            "date": {
                                "type": "string",
                                "format": "date",
                                "example": "2024-07-26"
                            },
                            "time": {
                                "type": "string",
                                "example": "19h30 (accès recommandé dès 18h00)"
                            },
                            "location": {
                                "type": "string",
                                "example": "Stade de France, Saint-Denis"
                            },
                            "category": {
                                "type": "string",
                                "example": "Cérémonies"
                            },
                            "image": {
                                "type": "string",
                                "format": "uri",
                                "example": "https://picsum.photos/seed/1/600/400"
                            }
                        },
                        "type": "object"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-04-22T20:00:00Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-04-22T20:00:00Z"
                    }
                },
                "type": "object"
            },
            "Ticket": {
                "required": [
                    "id",
                    "product_snapshot",
                    "token",
                    "qr_filename",
                    "pdf_filename",
                    "status",
                    "user_id",
                    "payment_id",
                    "product_id"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "product_snapshot": {
                        "properties": {
                            "product_name": {
                                "type": "string",
                                "example": "Concert X"
                            },
                            "ticket_type": {
                                "type": "string",
                                "example": "VIP"
                            },
                            "unit_price": {
                                "type": "number",
                                "format": "float",
                                "example": 49.99
                            },
                            "discount_rate": {
                                "type": "number",
                                "format": "float",
                                "example": 0.1
                            },
                            "discounted_price": {
                                "type": "number",
                                "format": "float",
                                "example": 44.99
                            }
                        },
                        "type": "object"
                    },
                    "token": {
                        "type": "string",
                        "example": "550e8400-e29b-41d4-a716-446655440000"
                    },
                    "qr_filename": {
                        "type": "string",
                        "example": "qr_123e4567-e89b-12d3-a456-426614174000.png"
                    },
                    "pdf_filename": {
                        "type": "string",
                        "example": "ticket_123e4567-e89b-12d3-a456-426614174000.pdf"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "issued",
                            "used",
                            "refunded",
                            "cancelled"
                        ],
                        "example": "issued"
                    },
                    "used_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-05-10T14:00:00Z",
                        "nullable": true
                    },
                    "refunded_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": null,
                        "nullable": true
                    },
                    "cancelled_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": null,
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-05-10T12:00:00Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-05-10T12:30:00Z"
                    }
                },
                "type": "object"
            },
            "User": {
                "required": [
                    "id",
                    "firstname",
                    "lastname",
                    "email",
                    "role",
                    "is_active"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "firstname": {
                        "type": "string",
                        "example": "John"
                    },
                    "lastname": {
                        "type": "string",
                        "example": "Doe"
                    },
                    "email": {
                        "type": "string",
                        "example": "john.doe@example.com"
                    },
                    "role": {
                        "type": "string",
                        "enum": [
                            "admin",
                            "employee",
                            "user"
                        ],
                        "example": "admin"
                    },
                    "twofa_enabled": {
                        "type": "boolean",
                        "example": true
                    },
                    "twofa_secret": {
                        "type": "string",
                        "example": "abcd1234"
                    },
                    "is_active": {
                        "type": "boolean",
                        "example": true
                    },
                    "email_verified_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-04-01T12:00:00Z"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-01-01T00:00:00Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-04-01T12:00:00Z"
                    },
                    "password_hash": {
                        "type": "string",
                        "example": "$2y$10$Sfs4e51z4./7bdZI9shXv1m5gIaDU5hN2mJ4qhp9HXVFuDQZDzKCm"
                    },
                    "remember_token": {
                        "type": "string",
                        "example": "abcd1234xyz"
                    },
                    "cart": {
                        "$ref": "#/components/schemas/Cart"
                    },
                    "tickets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Ticket"
                        }
                    },
                    "payments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Payment"
                        }
                    },
                    "emailUpdate": {
                        "$ref": "#/components/schemas/EmailUpdate"
                    }
                },
                "type": "object"
            }
        },
        "responses": {
            "BadRequest": {
                "description": "Bad request",
                "content": {
                    "application/json": {
                        "schema": {
                            "required": [
                                "message",
                                "code"
                            ],
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Bad request"
                                },
                                "code": {
                                    "type": "string",
                                    "example": "bad_request"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "Unauthenticated": {
                "description": "Authentication required",
                "content": {
                    "application/json": {
                        "schema": {
                            "required": [
                                "message",
                                "code"
                            ],
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Authentication required"
                                },
                                "code": {
                                    "type": "string",
                                    "example": "unauthenticated"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "Forbidden": {
                "description": "Forbidden",
                "content": {
                    "application/json": {
                        "schema": {
                            "required": [
                                "message",
                                "code"
                            ],
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "You do not have permission to perform this action"
                                },
                                "code": {
                                    "type": "string",
                                    "example": "forbidden"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "NotFound": {
                "description": "Resource not found",
                "content": {
                    "application/json": {
                        "schema": {
                            "required": [
                                "message",
                                "code"
                            ],
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Resource not found"
                                },
                                "code": {
                                    "type": "string",
                                    "example": "not_found"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "MethodNotAllowed": {
                "description": "Method not allowed",
                "content": {
                    "application/json": {
                        "schema": {
                            "required": [
                                "message",
                                "code"
                            ],
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Method not allowed"
                                },
                                "code": {
                                    "type": "string",
                                    "example": "method_not_allowed"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "CSRFTokenMismatch": {
                "description": "CSRF token mismatch",
                "content": {
                    "application/json": {
                        "schema": {
                            "required": [
                                "message",
                                "code"
                            ],
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "CSRF token mismatch"
                                },
                                "code": {
                                    "type": "string",
                                    "example": "csrf_token_mismatch"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "ValidationError": {
                "description": "Validation error",
                "content": {
                    "application/json": {
                        "schema": {
                            "required": [
                                "message",
                                "code",
                                "errors"
                            ],
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "The given data was invalid"
                                },
                                "code": {
                                    "type": "string",
                                    "example": "validation_error"
                                },
                                "errors": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "TooManyRequests": {
                "description": "Too many requests",
                "content": {
                    "application/json": {
                        "schema": {
                            "required": [
                                "message",
                                "code"
                            ],
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Too many requests"
                                },
                                "code": {
                                    "type": "string",
                                    "example": "too_many_requests"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "InternalError": {
                "description": "Internal server error",
                "content": {
                    "application/json": {
                        "schema": {
                            "required": [
                                "message",
                                "code"
                            ],
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Unexpected error"
                                },
                                "code": {
                                    "type": "string",
                                    "example": "internal_error"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "ServiceUnavailable": {
                "description": "Service temporarily unavailable",
                "content": {
                    "application/json": {
                        "schema": {
                            "required": [
                                "message",
                                "code"
                            ],
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Service temporarily unavailable"
                                },
                                "code": {
                                    "type": "string",
                                    "example": "service_unavailable"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "NoContent": {
                "description": "Operation successful, no content"
            },
            "DatabaseError": {
                "description": "Database error",
                "content": {
                    "application/json": {
                        "schema": {
                            "required": [
                                "message",
                                "code"
                            ],
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Database error"
                                },
                                "code": {
                                    "type": "string",
                                    "example": "database_error"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "TicketAlreadyProcessed": {
                "description": "This ticket was already processed",
                "content": {
                    "application/json": {
                        "schema": {
                            "required": [
                                "status",
                                "timestamp",
                                "user",
                                "event",
                                "code",
                                "message"
                            ],
                            "properties": {
                                "status": {
                                    "type": "string",
                                    "example": "used"
                                },
                                "timestamp": {
                                    "type": "string",
                                    "format": "date-time",
                                    "example": "2024-07-26T19:30:00Z"
                                },
                                "user": {
                                    "properties": {
                                        "firstname": {
                                            "type": "string",
                                            "example": "Jean"
                                        },
                                        "lastname": {
                                            "type": "string",
                                            "example": "Dupont"
                                        },
                                        "email": {
                                            "type": "string",
                                            "format": "email",
                                            "example": "jean.dupont@example.com"
                                        }
                                    },
                                    "type": "object"
                                },
                                "event": {
                                    "properties": {
                                        "name": {
                                            "type": "string",
                                            "example": "Opening Ceremony"
                                        },
                                        "date": {
                                            "type": "string",
                                            "format": "date",
                                            "example": "2024-07-26"
                                        },
                                        "time": {
                                            "type": "string",
                                            "example": "19h30 (accès recommandé dès 18h00)"
                                        },
                                        "location": {
                                            "type": "string",
                                            "example": "Stade de France, Saint-Denis"
                                        }
                                    },
                                    "type": "object"
                                },
                                "code": {
                                    "type": "string",
                                    "example": "ticket_already_processed"
                                },
                                "message": {
                                    "type": "string",
                                    "example": "This ticket was already used on 2024-07-26T19:30:00Z"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "UserNotFound": {
                "description": "User not found",
                "content": {
                    "application/json": {
                        "schema": {
                            "required": [
                                "message",
                                "code",
                                "redirect_url"
                            ],
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "User not found"
                                },
                                "code": {
                                    "type": "string",
                                    "example": "user_not_found"
                                },
                                "redirect_url": {
                                    "type": "string",
                                    "format": "url",
                                    "example": "https://frontend.app/verification-result/invalid"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "InvalidVerificationLink": {
                "description": "Invalid verification link",
                "content": {
                    "application/json": {
                        "schema": {
                            "required": [
                                "message",
                                "code",
                                "redirect_url"
                            ],
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Invalid verification link"
                                },
                                "code": {
                                    "type": "string",
                                    "example": "invalid_verification_link"
                                },
                                "redirect_url": {
                                    "type": "string",
                                    "format": "url",
                                    "example": "https://frontend.app/verification-result/invalid"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "AlreadyVerified": {
                "description": "Email is already verified",
                "content": {
                    "application/json": {
                        "schema": {
                            "required": [
                                "message",
                                "code",
                                "redirect_url"
                            ],
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Email is already verified"
                                },
                                "code": {
                                    "type": "string",
                                    "example": "already_verified"
                                },
                                "redirect_url": {
                                    "type": "string",
                                    "format": "url",
                                    "example": "https://frontend.app/verification-result/already-verified"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "VerificationTokenMissing": {
                "description": "Invalid or expired verification token",
                "content": {
                    "application/json": {
                        "schema": {
                            "required": [
                                "message",
                                "code",
                                "redirect_url"
                            ],
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Invalid or expired verification token"
                                },
                                "code": {
                                    "type": "string",
                                    "example": "verification_token_missing"
                                },
                                "redirect_url": {
                                    "type": "string",
                                    "format": "url",
                                    "example": "https://frontend.app/verification-result/invalid"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "EmailUpdateNotFound": {
                "description": "Email request not found",
                "content": {
                    "application/json": {
                        "schema": {
                            "required": [
                                "message",
                                "code",
                                "redirect_url"
                            ],
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Email request not found"
                                },
                                "code": {
                                    "type": "string",
                                    "example": "email_not_found"
                                },
                                "redirect_url": {
                                    "type": "string",
                                    "format": "url",
                                    "example": "https://frontend.app/verification-result/invalid"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "StockUnavailable": {
                "description": "Some items in the cart exceed available stock",
                "content": {
                    "application/json": {
                        "schema": {
                            "required": [
                                "message",
                                "code",
                                "errors"
                            ],
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Stock unavailable for one or more items in the cart"
                                },
                                "code": {
                                    "type": "string",
                                    "example": "stock_unavailable"
                                },
                                "errors": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "product_id": {
                                                "type": "integer",
                                                "example": 42
                                            },
                                            "product_name": {
                                                "type": "string",
                                                "example": "Billet concert"
                                            },
                                            "requested_quantity": {
                                                "type": "integer",
                                                "example": 5
                                            },
                                            "available_quantity": {
                                                "type": "integer",
                                                "example": 2
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            }
        },
        "parameters": {
            "AcceptLanguageHeader": {
                "name": "Accept-Language",
                "in": "header",
                "description": "Language of the local response. Supported values : `en`, `fr`, `de`. Default `en`.",
                "required": false,
                "schema": {
                    "type": "string",
                    "default": "en",
                    "enum": [
                        "en",
                        "fr",
                        "de"
                    ]
                }
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "description": "Use `Bearer {token}` in Authorization header",
                "bearerFormat": "JWT",
                "scheme": "bearer"
            }
        }
    },
    "tags": [
        {
            "name": "Authentication",
            "description": "User authentication and registration"
        },
        {
            "name": "Users",
            "description": "Operations related to user management"
        },
        {
            "name": "Tickets",
            "description": "Ticket creation, generation, validation, and tracking"
        },
        {
            "name": "Payments",
            "description": "Payment processing and secure transactions"
        },
        {
            "name": "Invoices",
            "description": "Invoice generation and download"
        },
        {
            "name": "Carts",
            "description": "Operations about shopping cart"
        },
        {
            "name": "Products",
            "description": "Product management, including categories and details"
        }
    ],
    "externalDocs": {
        "description": "Full Documentation",
        "url": "https://api-jo2024.mkcodecreations.dev/"
    }
}