{
    "openapi": "3.0.0",
    "info": {
        "title": "Paris 2024 Olympic Games Ticketing API",
        "description": "This API manages the entire ticket lifecycle for the Paris 2024 Olympic Games: user registration, shopping cart management, payment processing, ticket generation, and entry validation.\n\nThis project was developed as part of the **Bachelor's degree in Digital Solutions Development**. The architecture is based on a **modular Laravel monolith**, structured into internal services (users, tickets, cart, payment, etc.) organized as internal packages to ensure better organization, maintainability, and scalability.\n\nThe notification system, including emails and system messages, is managed internally through a dedicated Laravel service and is not exposed as a public API.\n\n**Note:** All API endpoints are protected by CORS (Cross-Origin Resource Sharing) to restrict access to authorized domains only, ensuring secure communication between the client and the server.",
        "contact": {
            "name": "Myriam KÃ¼hn",
            "url": "https://myriamkuhn.com/",
            "email": "myriam.kuehn@free.fr"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://localhost:8000",
            "description": "Local development environment"
        },
        {
            "url": "https://api-jo2024.mkcodecreations.dev",
            "description": "Production server"
        }
    ],
    "paths": {
        "/api/cart/ping": {
            "get": {
                "tags": [
                    "Cart"
                ],
                "summary": "Test route",
                "operationId": "e7cfa648d85fd26bbc030629bb30bcf1",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/payment/ping": {
            "get": {
                "tags": [
                    "Payments"
                ],
                "summary": "Test route",
                "operationId": "c3ae22d08215bab0c4d22e2edc5b121c",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/product/ping": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Test route",
                "operationId": "603751feb31b986383e6d4af7b7a7b44",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/ticket/ping": {
            "get": {
                "tags": [
                    "Tickets"
                ],
                "summary": "Test route",
                "operationId": "d558dab4d2de358752c3798cf771c6c7",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/auth/register": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new user",
                "description": "Allows a user to create an account. Requires a secure password (at least 15 characters, with uppercase letters, lowercase letters, numbers, and symbols), validation via Google reCAPTCHA to prevent abuse, and email confirmation after registration. Account creation attempts are protected by throttling to prevent spam. A verification email is sent to validate the user's email address. The API also protects against unauthorized access with a restrictive CORS configuration.",
                "operationId": "registerUser",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "firstname",
                                    "lastname",
                                    "email",
                                    "password",
                                    "password_confirmation",
                                    "captcha_token"
                                ],
                                "properties": {
                                    "firstname": {
                                        "type": "string",
                                        "maxLength": 100,
                                        "example": "John"
                                    },
                                    "lastname": {
                                        "type": "string",
                                        "maxLength": 100,
                                        "example": "Doe"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "john@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "MegaGreatPassword@2025"
                                    },
                                    "password_confirmation": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "MegaGreatPassword@2025"
                                    },
                                    "captcha_token": {
                                        "type": "string",
                                        "example": "03AGdBq27..."
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User created successfull. Verification Email sended.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Registration successful. Please check your emails."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error or captcha verification failed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation error. Please check your data."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "property": null
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many attempts. Please try again later.",
                        "headers": {
                            "Retry-After": {
                                "description": "Time to wait before retrying (in seconds)",
                                "schema": {
                                    "type": "integer",
                                    "example": 60
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Too many attempts. Please try again later."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal or database error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "An unknown error occurred. Please try again."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Access denied. You do not have the necessary permissions."
                                        },
                                        "errors": {
                                            "type": "string",
                                            "example": "You do not have the necessary permissions."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "You must be logged in to perform this action."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "api/auth/login": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Login user",
                "description": "Allows a user to log in with their email and password, and receive an authentication token. Admins can disable accounts, and users can choose to remember their login or activate two-factor authentication (2FA).",
                "operationId": "login",
                "requestBody": {
                    "description": "Login credentials (email and password are mandatory)",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "password",
                                    "remember"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "user@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "MyGreatPassword@123"
                                    },
                                    "remember": {
                                        "description": "Optional: Whether the user wants to stay logged in",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "twofa_code": {
                                        "description": "Optional: Two-factor authentication code",
                                        "type": "string",
                                        "example": "123456"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Connection successful. Returns the authentication token and user information.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Login successful."
                                        },
                                        "token": {
                                            "type": "string",
                                            "example": "token_example"
                                        },
                                        "user": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "firstname": {
                                                    "type": "string",
                                                    "example": "John"
                                                },
                                                "lastname": {
                                                    "type": "string",
                                                    "example": "Doe"
                                                },
                                                "email": {
                                                    "type": "string",
                                                    "example": "user@example.com"
                                                },
                                                "role": {
                                                    "type": "string",
                                                    "example": "user"
                                                },
                                                "twofa_enabled": {
                                                    "type": "boolean",
                                                    "example": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error (email not verified or 2FA code not valid)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Validation error. Please check your data."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid credentials.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid credentials. Please check your email address and password."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Account disabled or access denied.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Your account has been disabled. Please contact support."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many attempts",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Too many attempts. Please try again later."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error or database error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "An unknown error occurred. Please try again."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/enable2FA": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Enable two-factor authentication for the user",
                "description": "Generates a new secret key for two-factor authentication and returns the QR code URL.",
                "operationId": "enableTwoFactor",
                "responses": {
                    "200": {
                        "description": "Two-factor authentication enabled successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "secret": {
                                            "description": "Generated secret key for 2FA",
                                            "type": "string",
                                            "example": "JBSWY3DPEHPK3PXP"
                                        },
                                        "qrCodeUrl": {
                                            "description": "URL to generate QR code for 2FA",
                                            "type": "string",
                                            "example": "otpauth://totp/Example%3Auser%40example.com?secret=JBSWY3DPEHPK3PXP&issuer=Example"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication error: User must be logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "You must be logged in to perform this action."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error: Input validation failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Validation error. Please check your data."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "additionalProperties": [
                                                {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "property": null
                                                    },
                                                    "property": null
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied: User does not have the necessary permissions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Access denied. You do not have the necessary permissions."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "An unknown error occurred. Please try again."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/auth/email/verify/{id}/{hash}": {
            "get": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Verify the user's email address",
                "description": "This route verifies a user's email address via a link sent to them. Based on the result, it returns a redirection URL. This operation is intended to be used exclusively through links sent by email.",
                "operationId": "verifyEmail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User ID to verify",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    {
                        "name": "hash",
                        "in": "path",
                        "description": "Hash of the user's email address",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "abc123hashsecure"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email verified successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Your email address has been successfully verified."
                                        },
                                        "redirect_url": {
                                            "description": "Used for redirection only in production. In development, a JSON response will be returned.",
                                            "type": "string",
                                            "example": "https://jo2024.mkcodecreation.dev/verification-result/success"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid verification link",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "The verification link is invalid."
                                        },
                                        "redirect_url": {
                                            "description": "Used for redirection only in production. In development, a JSON response will be returned.",
                                            "type": "string",
                                            "example": "https://jo2024.mkcodecreation.dev/verification-result/invalid"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "User not found."
                                        },
                                        "redirect_url": {
                                            "description": "Used for redirection only in production. In development, a JSON response will be returned.",
                                            "type": "string",
                                            "example": "https://jo2024.mkcodecreation.dev/verification-result/invalid"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Email already verified",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Your email address has already been verified."
                                        },
                                        "redirect_url": {
                                            "description": "Used for redirection only in production. In development, a JSON response will be returned.",
                                            "type": "string",
                                            "example": "https://jo2024.mkcodecreation.dev/verification-result/already-verified"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "An unknown error occurred. Please try again later"
                                        },
                                        "redirect_url": {
                                            "description": "Used for redirection only in production. In development, a JSON response will be returned.",
                                            "type": "string",
                                            "example": "https://jo2024.mkcodecreation.dev/verification-result/error"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/email/verification-notification": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Resend email verification link",
                "description": "This endpoint allows a logged-in user to request a resend of the email verification link if their email address has not been verified yet.",
                "operationId": "resendVerificationEmail",
                "responses": {
                    "200": {
                        "description": "Email verification link resent successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "A new verification email has been sent."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Email already verified",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Your email address has already been verified."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "You must be logged in to perform this action."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "An unknown error occurred. Please try again later"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        }
    },
    "components": {
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "description": "Enter your Bearer token in the Authorization header, starting with 'Bearer 'followed by a space and your token. For example: `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...`",
                "bearerFormat": "JWT",
                "scheme": "bearer"
            }
        }
    },
    "tags": [
        {
            "name": "Authentication",
            "description": "User authentication and registration"
        },
        {
            "name": "Tickets",
            "description": "Ticket creation, generation, validation, and tracking"
        },
        {
            "name": "Payments",
            "description": "Payment processing and secure transactions"
        },
        {
            "name": "Cart",
            "description": "Management of items added to the shopping cart"
        },
        {
            "name": "Products",
            "description": "Management of products available for purchase"
        }
    ]
}